#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/CsvUtil.qm

%exec-class CsvUtilTest

public class CsvUtilTest inherits QUnit::Test {
    private {
        const CsvInput = "UK,1234567890,\"Sony, Xperia S\",31052012
UK,1234567891,\"Sony, Xperia S\",31052012
UK,1234567892,\"Sony, Xperia S\",31052012
UK,1234567893,\"Sony, Xperia S\",31052012";

        const CsvRecords = (
            ("cc": "UK", "serno": 1234567890, "desc": "Sony, Xperia S", "received": 2012-05-31),
            ("cc": "UK", "serno": 1234567891, "desc": "Sony, Xperia S", "received": 2012-05-31),
            ("cc": "UK", "serno": 1234567892, "desc": "Sony, Xperia S", "received": 2012-05-31),
            ("cc": "UK", "serno": 1234567893, "desc": "Sony, Xperia S", "received": 2012-05-31),
        );
    }

    constructor() : Test("CsvUtilTest", "1.0") {
        addTestCase("Basic CSV tests", \csvTest(), NOTHING);
        addTestCase("Escaping", \escapeTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    csvTest() {
        hash opts = ("fields": ("cc": "string", "serno": "int", "desc": "string", "received": ("type": "date", "format": "DDMMYYYY")),);

        # Iterate through source
        CsvDataIterator i(CsvInput, opts);
        list l = map $1, i;
        testAssertion("CsvDataIterator 1", \equalsIterated(), (i, new ListIterator(l)));

        # test with empty data and header lines
        i = new CsvDataIterator("", ("header-lines": 1));
        testAssertion("CsvDataIterator 2", \i.next(), (), RESULT_FAILURE);
    }

    escapeTest() {
        list row = ( ( '12"', 'a"bc"', ), );
        string esc_default = '"12\"","a\"bc\""'+"\n";
        string esc_double = '"12""","a""bc"""'+"\n";

        CsvStringWriter w( ("optimal-quotes" : False) );
        string outstr = w.write(row);
        testAssertion("default escaping", \equals(), (esc_default, outstr));

        w = new CsvStringWriter(("optimal_quotes": False) );
        outstr = w.write(row);
        assertEq(esc_default, outstr);

        w = new CsvStringWriter( ("optimal-quotes" : False, "quote_escape" : '"') );
        outstr = w.write(row);
        testAssertion("double escaping", \equals(), (esc_double, outstr));

        hash dmh = ("cc": "XX");
        w = new CsvStringWriter(("headers": ("XX", "serno", "desc", "received"), "fields": ("received": ("type": "date", "format": "DDMMYYYY")), "datamap": dmh));
        outstr = w.write(CsvRecords.iterator());
        assertEq("XX,serno,desc,received\n" + CsvInput + "\n", outstr);
    }
}
